import { z } from 'zod';
import { getSecrets } from '@fieldhive/infrastructure';

// Server config schema
const serverConfigSchema = z.object({
  port: z.number().default(3001),
  wsPort: z.number().default(3004),
  corsOrigin: z.string().default('http://localhost:3000'),
  nodeEnv: z.enum(['development', 'production', 'test']).default('development'),
});

// Database config schema
const dbConfigSchema = z.object({
  host: z.string().default('localhost'),
  port: z.number().default(5432),
  username: z.string().default('postgres'),
  password: z.string().default('postgres'),
  database: z.string().default('fieldhive_dev'),
  ssl: z.boolean().default(false),
  sslRejectUnauthorized: z.boolean().default(false),
  pool: z.object({
    min: z.number().default(2),
    max: z.number().default(10),
    idleTimeoutMillis: z.number().default(10000),
  }),
});

// Environment schema
const envSchema = z.object({
  // Server
  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),
  PORT: z.number().default(3001),
  WS_PORT: z.number().default(3004),
  CORS_ORIGIN: z.string().default('http://localhost:3000'),
  
  // Database
  DB_HOST: z.string().default('localhost'),
  DB_PORT: z.number().default(5432),
  DB_USER: z.string().default('postgres'),
  DB_PASSWORD: z.string().default('postgres'),
  DB_NAME: z.string().default('fieldhive_dev'),
  DB_SSL: z.boolean().default(false),
  DB_SSL_REJECT_UNAUTHORIZED: z.boolean().default(false),
  
  // Security
  JWT_SECRET: z.string().default('development-secret-key'),
  
  // AWS
  AWS_REGION: z.string().default('us-east-1'),
  AWS_ACCESS_KEY_ID: z.string().optional(),
  AWS_SECRET_ACCESS_KEY: z.string().optional(),
  
  // Logging
  LOG_LEVEL: z.enum(['error', 'warn', 'info', 'http', 'debug']).default('debug'),
  ENABLE_REQUEST_LOGGING: z.boolean().default(true),
  ENABLE_QUERY_LOGGING: z.boolean().default(true),
  
  // Rate Limiting
  RATE_LIMIT_WINDOW_MS: z.number().default(900000),
  RATE_LIMIT_MAX_REQUESTS: z.number().default(100),
});

// Parse environment variables
export const env = envSchema.parse({
  // Server
  NODE_ENV: process.env.NODE_ENV,
  PORT: Number(process.env.PORT),
  WS_PORT: Number(process.env.WS_PORT),
  CORS_ORIGIN: process.env.CORS_ORIGIN,
  
  // Database
  DB_HOST: process.env.DB_HOST,
  DB_PORT: Number(process.env.DB_PORT),
  DB_USER: process.env.DB_USER,
  DB_PASSWORD: process.env.DB_PASSWORD,
  DB_NAME: process.env.DB_NAME,
  DB_SSL: process.env.DB_SSL === 'true',
  DB_SSL_REJECT_UNAUTHORIZED: process.env.DB_SSL_REJECT_UNAUTHORIZED === 'true',
  
  // Security
  JWT_SECRET: process.env.JWT_SECRET,
  
  // AWS
  AWS_REGION: process.env.AWS_REGION,
  AWS_ACCESS_KEY_ID: process.env.AWS_ACCESS_KEY_ID,
  AWS_SECRET_ACCESS_KEY: process.env.AWS_SECRET_ACCESS_KEY,
  
  // Logging
  LOG_LEVEL: process.env.LOG_LEVEL as any,
  ENABLE_REQUEST_LOGGING: process.env.ENABLE_REQUEST_LOGGING === 'true',
  ENABLE_QUERY_LOGGING: process.env.ENABLE_QUERY_LOGGING === 'true',
  
  // Rate Limiting
  RATE_LIMIT_WINDOW_MS: Number(process.env.RATE_LIMIT_WINDOW_MS),
  RATE_LIMIT_MAX_REQUESTS: Number(process.env.RATE_LIMIT_MAX_REQUESTS),
});

// Export database config
export const dbConfig = dbConfigSchema.parse({
  host: env.DB_HOST,
  port: env.DB_PORT,
  username: env.DB_USER,
  password: env.DB_PASSWORD,
  database: env.DB_NAME,
  ssl: env.DB_SSL,
  sslRejectUnauthorized: env.DB_SSL_REJECT_UNAUTHORIZED,
  pool: {
    min: 2,
    max: 10,
    idleTimeoutMillis: 10000,
  },
});

// Export server config
export const serverConfig = serverConfigSchema.parse({
  port: env.PORT,
  wsPort: env.WS_PORT,
  corsOrigin: env.CORS_ORIGIN,
  nodeEnv: env.NODE_ENV,
});

// Load secrets in production
export const loadSecrets = async () => {
  if (env.NODE_ENV === 'production') {
    const secrets = await getSecrets('production');
    return {
      ...dbConfig,
      host: secrets.database.host,
      port: secrets.database.port,
      username: secrets.database.user,
      password: secrets.database.password,
      database: secrets.database.name,
    };
  }
  return dbConfig;
};